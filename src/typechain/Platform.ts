/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PlatformInterface extends utils.Interface {
  functions: {
    "calculateUserRewards(uint256,uint256)": FunctionFragment;
    "claimFor(address,uint8)": FunctionFragment;
    "getStakePeriods()": FunctionFragment;
    "getStakePeriodsMultipliers()": FunctionFragment;
    "stake(uint256,uint8)": FunctionFragment;
    "stakeWithPermit(uint256,uint8,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "token()": FunctionFragment;
    "totalReserved()": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "userStaking(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateUserRewards",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakePeriods",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakePeriodsMultipliers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeWithPermit",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalReserved",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userStaking",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateUserRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStakePeriods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakePeriodsMultipliers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalReserved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userStaking",
    data: BytesLike
  ): Result;

  events: {
    "Claimed(address,uint256,uint256)": EventFragment;
    "Staked(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
}

export type ClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { staker: string; claimedRewards: BigNumber; timestamp: BigNumber }
>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export type StakedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    staker: string;
    stakedAmount: BigNumber;
    stakeIndex: BigNumber;
    timestamp: BigNumber;
  }
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface Platform extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PlatformInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateUserRewards(
      stakeAmount: BigNumberish,
      stakePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimFor(
      staker: string,
      stakeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getStakePeriods(
      overrides?: CallOverrides
    ): Promise<[[number, number, number]]>;

    getStakePeriodsMultipliers(
      overrides?: CallOverrides
    ): Promise<[[number, number, number]]>;

    stake(
      amount: BigNumberish,
      stakePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeWithPermit(
      amount: BigNumberish,
      stakePeriod: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalReserved(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    userStaking(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        staked: BigNumber;
        reservedRewards: BigNumber;
        stakePeriod: BigNumber;
        stakedAt: BigNumber;
      }
    >;
  };

  calculateUserRewards(
    stakeAmount: BigNumberish,
    stakePeriod: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimFor(
    staker: string,
    stakeIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getStakePeriods(overrides?: CallOverrides): Promise<[number, number, number]>;

  getStakePeriodsMultipliers(
    overrides?: CallOverrides
  ): Promise<[number, number, number]>;

  stake(
    amount: BigNumberish,
    stakePeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeWithPermit(
    amount: BigNumberish,
    stakePeriod: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  totalReserved(overrides?: CallOverrides): Promise<BigNumber>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  userStaking(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      staked: BigNumber;
      reservedRewards: BigNumber;
      stakePeriod: BigNumber;
      stakedAt: BigNumber;
    }
  >;

  callStatic: {
    calculateUserRewards(
      stakeAmount: BigNumberish,
      stakePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimFor(
      staker: string,
      stakeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getStakePeriods(
      overrides?: CallOverrides
    ): Promise<[number, number, number]>;

    getStakePeriodsMultipliers(
      overrides?: CallOverrides
    ): Promise<[number, number, number]>;

    stake(
      amount: BigNumberish,
      stakePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeWithPermit(
      amount: BigNumberish,
      stakePeriod: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    totalReserved(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    userStaking(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        staked: BigNumber;
        reservedRewards: BigNumber;
        stakePeriod: BigNumber;
        stakedAt: BigNumber;
      }
    >;
  };

  filters: {
    "Claimed(address,uint256,uint256)"(
      staker?: string | null,
      claimedRewards?: null,
      timestamp?: null
    ): ClaimedEventFilter;
    Claimed(
      staker?: string | null,
      claimedRewards?: null,
      timestamp?: null
    ): ClaimedEventFilter;

    "Staked(address,uint256,uint256,uint256)"(
      staker?: string | null,
      stakedAmount?: null,
      stakeIndex?: null,
      timestamp?: null
    ): StakedEventFilter;
    Staked(
      staker?: string | null,
      stakedAmount?: null,
      stakeIndex?: null,
      timestamp?: null
    ): StakedEventFilter;
  };

  estimateGas: {
    calculateUserRewards(
      stakeAmount: BigNumberish,
      stakePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimFor(
      staker: string,
      stakeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getStakePeriods(overrides?: CallOverrides): Promise<BigNumber>;

    getStakePeriodsMultipliers(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      stakePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeWithPermit(
      amount: BigNumberish,
      stakePeriod: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalReserved(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    userStaking(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateUserRewards(
      stakeAmount: BigNumberish,
      stakePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimFor(
      staker: string,
      stakeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getStakePeriods(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakePeriodsMultipliers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      stakePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeWithPermit(
      amount: BigNumberish,
      stakePeriod: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalReserved(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userStaking(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
